generate article  
PROMPTS: IMPLEMENT NOW 
- Choose program type: Radio Button picker
- Please Enter Article ID: text input with validation  
- Is Program LLA? YES/NO     
- Is OUS? YES/NO
- Peer Reviewer? YES/NO 
- Collection Page? YES/NO
    - Find URL and Collection Slug from ticket 
    - Rest of info from internal db/config file 
- Has Slide Deck? YES/NO 
- Has For Your Patient PDF? YES/NO 
    - Make new subsection and insert in the beginning of program 

generate article  
PROMPTS: FUTURE POSSIBLES 
- Has Activity? YES/NO  
    - Chain to this series of prompts: 
        - Has CME Author
        - Has CME Reviewer 
        - Has Nurse 
        - Has Pharma 
        - Has MOC 
- Has Transcript? YES/NO 


generate il
- Has EC? YES/NO 
    - Choose your language(s): Checkbox picker 
- Has Downloadable PDF? YES/NO 
    - Choose your language(s): Checkbox picker 
- Has Transcript PDF? YES/NO 
    - Choose your language(s): Checkbox picker 
- Has Subtitles? YES/NO 
    - Choose your language(s): Checkbox picker 


generate checklist    
- Come up with getPlain...() functions that use find and NO formatting 
    - Remove HTML EXCEPT:  
        - <em>, <i>
    - Decode Entities
    - Replace each paragraph with \n
    - Export plain text to the output file. 
- OUTPUT FILE FORMATTING: 
    - Use flags for each section
    - All caps for flag for readability 
    - 
- Take program object 
    - Use that to determine checklist function 
- The checklist function should:
    - run through all of the prodticket.get...() functions 
    - Also put the default text necessary for program


generate checklist --properties 
- SEE excel for which ones to include 
- Basically this is a subset of the full command above. 


CODING STRATEGY: 
- Use Pipes for post formatting / auto processing of output 

- Use Options for choosing a particular 'way' of performing 
the command 
    - Example: generate article --brief
    - Options Help: gets triggered by typing the command and then 
      an empty options flag 
      EXAMPLE: generate article --
        - this will return a list of possible options. 
    - // args.options.template --> value for --template option (true/false)
        // args.stdin[0] --> input from the user

- Use Prompts for chaining required input 

- Use vorpal.exec('nameOfCommand');
    - This is useful for programmatically triggering commands 

- Emit events?? - Look into this 
// vorpal.emit('client_prompt_submit', 'properties');



CATCHING ERRORS
- Use a set of Exception classes
- Throw instances of these within core module functions 
- Use try/catch blocks in the commands 
    - This is where the exceptions would be caught and 
      shown to the user. 
EXAMPLE: core module 
if (someProblem) {
    throw new utils.RandomException(`What the user should do differently...`);
} 

EXAMPLE 2: command 
}, (result) => {
if (result.yes) {
    try {
        this.log(store.removeComponent(args.name));
    } catch (error) {
        this.log(error);
        callback(); 
    }                                
} else {
    this.log('component not removed');
}
callback(); 
